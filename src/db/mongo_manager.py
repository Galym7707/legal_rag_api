import os
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, OperationFailure
from datetime import datetime
import logging

# –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
MONGO_URI = os.getenv("MONGO_URI")
DB_NAME = os.getenv("MONGO_DB_NAME", "legal_rag_db") # –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'legal_rag_db'

client = None
db = None

def init_mongo_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB."""
    global client, db
    if client and db: # –ï—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
        logging.info("MongoDB —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return client

    if not MONGO_URI:
        logging.error("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MONGO_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return None

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
        client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
        client.admin.command('ping') # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        db = client[DB_NAME]
        logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è session_id –∏ message_index
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–¥–µ–∫—Å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
        # MongoDB –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≤—Å—Ç–∞–≤–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ.
        db.conversations.create_index([("session_id", 1), ("message_index", 1)], unique=False)
        logging.info("‚úÖ –ò–Ω–¥–µ–∫—Å—ã MongoDB —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")
        return client

    except ConnectionFailure as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
        return None
    except OperationFailure as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ MongoDB (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏–ª–∏ –ø—Ä–∞–≤–∞–º–∏): {e}")
        return None
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MongoDB: {e}")
        return None

def save_message(session_id: str, role: str, content: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –±–µ—Å–µ–¥—ã –≤ MongoDB."""
    if not db:
        logging.error("MongoDB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π message_index –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
        # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
        last_message = db.conversations.find_one(
            {"session_id": session_id},
            sort=[("message_index", -1)]
        )
        message_index = last_message["message_index"] + 1 if last_message else 0

        message = {
            "session_id": session_id,
            "role": role,
            "parts": [content],
            "timestamp": datetime.now(),
            "message_index": message_index
        }
        db.conversations.insert_one(message)
        logging.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}, —Ä–æ–ª—å: {role}, –∏–Ω–¥–µ–∫—Å: {message_index}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ MongoDB –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {e}")

def load_conversation(session_id: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏–∑ MongoDB."""
    if not db:
        logging.error("MongoDB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return []

    try:
        messages = list(db.conversations.find(
            {"session_id": session_id},
            {"_id": 0, "session_id": 0, "timestamp": 0} # –ò—Å–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–æ–ª—è
        ).sort("message_index", 1)) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞

        formatted_history = []
        for entry in messages:
            content = entry.get('parts')[0] if isinstance(entry.get('parts'), list) and entry.get('parts') else ''
            formatted_history.append({"role": entry.get('role'), "content": content})
        
        logging.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {len(formatted_history)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return formatted_history
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ MongoDB –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
        return []

def delete_conversation(session_id: str):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏–∑ MongoDB."""
    if not db:
        logging.error("MongoDB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return

    try:
        result = db.conversations.delete_many({"session_id": session_id})
        logging.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {result.deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ MongoDB –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {e}")

def get_all_sessions_summary_mongo():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –∏–∑ MongoDB, –≤–∫–ª—é—á–∞—è –ø–µ—Ä–≤–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫.
    """
    if not db:
        logging.error("MongoDB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å–µ—Å—Å–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return []
    try:
        pipeline = [
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ session_id
            {"$group": {
                "_id": "$session_id",
                "first_user_message_content": {
                    "$first": {
                        "$cond": [
                            {"$eq": ["$role", "user"]}, # –ï—Å–ª–∏ —Ä–æ–ª—å - user
                            {"$arrayElemAt": ["$parts", 0]}, # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞ parts
                            "$$REMOVE" # –£–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ user
                        ]
                    }
                }
            }},
            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –µ—Å—Ç—å –ø–æ—Å–ª–µ $$REMOVE)
            {"$match": {"first_user_message_content": {"$exists": True}}},
            # –ü—Ä–æ–µ–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            {"$project": {
                "id": "$_id",
                "title": {
                    "$cond": [
                        {"$ne": ["$first_user_message_content", None]},
                        # –û–±—Ä–µ–∑–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º "..." –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ
                        {"$concat": [
                            {"$substrCP": ["$first_user_message_content", 0, 50]},
                            {"$cond": [
                                {"$gt": [{"$strLenCP": "$first_user_message_content"}, 50]},
                                "...",
                                ""
                            ]}
                        ]},
                        "–ù–æ–≤—ã–π —á–∞—Ç"
                    ]
                },
                "_id": 0 # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ _id
            }},
            {"$sort": {"id": 1}} # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ session_id –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        ]

        sessions_summary = list(db.conversations.aggregate(pipeline))
        logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π: {len(sessions_summary)} —Å–µ—Å—Å–∏–π.")
        return sessions_summary
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ —Å–µ—Å—Å–∏–π –∏–∑ MongoDB: {e}")
        return []
