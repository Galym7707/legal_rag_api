import os
from dotenv import load_dotenv
from langchain_community.vectorstores import Chroma
from langchain_community.embeddings import HuggingFaceEmbeddings

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
CHROMA_DB_PATH = os.getenv("CHROMA_DB_PATH", "./chroma_db_data")
EMBEDDING_MODEL_NAME = "cointegrated/LaBSE-multilingual-sbert"

class VectorDBManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ChromaDB.
    """
    def __init__(self):
        self.embedding_function = HuggingFaceEmbeddings(model_name=EMBEDDING_MODEL_NAME)
        self.db = Chroma(
            persist_directory=CHROMA_DB_PATH,
            embedding_function=self.embedding_function
        )
        print(f"‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü—É—Ç—å: {CHROMA_DB_PATH}")

    def add_documents(self, documents, client_id):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ä–∞—Å—à–∏—Ä—è—é—Ç—Å—è client_id –¥–ª—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç–∏.
        """
        if not documents:
            print("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º client_id –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        for doc in documents:
            if 'metadata' not in doc or not isinstance(doc['metadata'], dict):
                doc['metadata'] = {}
            doc['metadata']['client_id'] = client_id

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        self.db.add_texts(
            texts=[doc.page_content for doc in documents],
            metadatas=[doc.metadata for doc in documents]
        )
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(documents)} —á–∞–Ω–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}.")

    def search_documents(self, query: str, client_id: str, k: int = 4):
        """
        –ò—â–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É.
        –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ client_id.
        """
        print(f"üîç –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}' (–∫–ª–∏–µ–Ω—Ç: {client_id})")

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ client_id
        filter_dict = {"client_id": {"$eq": client_id}}

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LangChain –¥–ª—è –ø–æ–∏—Å–∫–∞
        results = self.db.similarity_search(query, k=k, filter=filter_dict)

        if not results:
            print(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return []

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤.")
        return results
