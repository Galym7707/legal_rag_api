import os
from flask import Flask, request, jsonify, Response, stream_with_context
from flask_cors import CORS
from dotenv import load_dotenv
import logging
import uuid # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ session_id

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = Flask(__name__)
# –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å.
CORS(app) 
app.config['MAX_CONTENT_LENGTH'] = 1024 * 1024 * 1024  # 1 GB –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ src ---
from src.db.mongo_manager import init_mongo_db, save_message, load_conversation, delete_conversation, get_all_sessions_summary_mongo
from src.db.chroma_manager import init_chroma_db, add_documents_to_chroma, get_retriever
from src.ingestion.document_processor import process_document_content
from src.rag.generation import get_rag_response

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
# –≠—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ `main.py`
mongo_db_client = init_mongo_db()
chroma_vector_db = init_chroma_db() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ LLM API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    logging.error("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ LLM, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª RAG –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å LLM –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º

# --- API Endpoints ---

@app.route('/ask_legal_question', methods=['POST'])
def ask_legal_question_route():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò-—é—Ä–∏—Å—Ç–∞.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ ID —Å–µ—Å—Å–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
    """
    try:
        data = request.json
        session_id = data.get('session_id')
        question = data.get('question')

        if not question:
            return jsonify({"error": "–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."}), 400
        
        if not session_id:
            session_id = str(uuid.uuid4()) # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
            logging.info(f"üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å ID: {session_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        save_message(session_id, "user", question)
        
        # --- RAG Logic ---
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        chat_history = load_conversation(session_id)
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ç—Ä–∏–≤–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ ChromaDB
        retriever = get_retriever(chroma_vector_db)
        
        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é RAG
        # –í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        answer, sources = get_rag_response(question, chat_history, retriever)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
        save_message(session_id, "ai", answer)

        logging.info(f"‚úÖ –í–æ–ø—Ä–æ—Å '{question[:50]}...' –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
        return jsonify({
            "session_id": session_id,
            "answer": answer,
            "sources": sources # sources –ø–æ–∫–∞ –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –º–µ—Å—Ç–æ
        })

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /ask_legal_question: {e}", exc_info=True)
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"}), 500


@app.route('/upload_document', methods=['POST'])
def upload_document_route():
    """
    –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    """
    try:
        if 'file' not in request.files:
            return jsonify({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ"}), 400

        file = request.files['file']
        if file.filename == '':
            return jsonify({"error": "–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        metadata_str = request.form.get('metadata', '{}')
        try:
            metadata = json.loads(metadata_str)
        except json.JSONDecodeError:
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON-—Å—Ç—Ä–æ–∫–æ–π."}), 400

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ ChromaDB
        # document_processor.py –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ —á–∞–Ω–∫–∏–Ω–≥–∞
        # add_documents_to_chroma –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —á–∞–Ω–∫–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ ChromaDB
        doc_id = add_documents_to_chroma(file, metadata, chroma_vector_db)

        logging.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{file.filename}' —Å ID '{doc_id}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return jsonify({
            "message": f"–î–æ–∫—É–º–µ–Ω—Ç '{file.filename}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω.",
            "document_id": doc_id
        })

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", exc_info=True)
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"}), 500


@app.route('/get_history', methods=['GET'])
def get_history_route():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏.
    """
    try:
        session_id = request.args.get('session_id')
        if not session_id:
            return jsonify({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å session_id"}), 400

        history = load_conversation(session_id)
        logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}, —Å–æ–æ–±—â–µ–Ω–∏–π: {len(history)}")
        return jsonify({"session_id": session_id, "history": history})
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /get_history: {e}", exc_info=True)
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"}), 500


@app.route('/get_all_sessions_summary', methods=['GET'])
def get_all_sessions_summary_route():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    try:
        sessions_summary = get_all_sessions_summary_mongo()
        logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π: {len(sessions_summary)} —Å–µ—Å—Å–∏–π.")
        return jsonify({"sessions": sessions_summary})
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /get_all_sessions_summary: {e}", exc_info=True)
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ —Å–µ—Å—Å–∏–π: {str(e)}"}), 500


@app.route('/clear_history', methods=['POST'])
def clear_history_route():
    """
    –£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏.
    """
    try:
        data = request.json
        session_id = data.get('session_id')
        if not session_id:
            return jsonify({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å session_id"}), 400

        delete_conversation(session_id)
        logging.info(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id} –æ—á–∏—â–µ–Ω–∞.")
        return jsonify({"message": "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞", "session_id": session_id})
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /clear_history: {e}", exc_info=True)
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"}), 500


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=True) # debug=True —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
